interface Window {
  api: {
    getDoctors: () => Promise<Doctor[]>;
    addDoctor: (doctor: Omit<Doctor, 'id'>) => Promise<Doctor>; // Assuming id is generated by backend
    updateDoctor: (id: string, updatedFields: Partial<Doctor>) => Promise<Doctor>;
    deleteDoctor: (id: string) => Promise<void>;

    getOrders: () => Promise<Order[]>;
    addOrder: (order: Omit<Order, 'id' | 'status' | 'creationDate' | 'payments' | 'notes'>) => Promise<Order>; // Assuming id, status, creationDate, payments, notes are generated/managed by backend
    updateOrder: (id: string, updatedFields: Partial<Order>) => Promise<Order>;
    deleteOrder: (id: string) => Promise<void>;
    deleteOrdersByDate: (dates: { startDate: string; endDate: string }) => Promise<number>; // Returns number of deleted orders
    generateReceiptPdf: (order: Order, currentUser: User) => Promise<void>;

    login: (credentials: Pick<User, 'username' | 'password'>) => Promise<User>;
    addUser: (user: User) => Promise<User>;
    updateUser: (username: string, updatedFields: Partial<User>) => Promise<User>;
    getUserSecurityInfo: (username: string) => Promise<Pick<User, 'securityQuestion'>>;
    verifySecurityAnswer: (data: Pick<User, 'username' | 'securityAnswer'>) => Promise<boolean>;

    getNotifications: () => Promise<Notification[]>;
    markNotificationsAsRead: () => Promise<void>;

    exportDoctorsToCsv: () => Promise<void>;

    // IPC Renderer to Main communication for LLM
    generateLLMResponse: (prompt: string) => Promise<void>;
    on: (channel: string, listener: (...args: unknown[]) => void) => void;
    removeAllListeners: (channel: string) => void;
  };
}

interface ImportMetaEnv {
  readonly VITE_GEMINI_API_KEY: string;
  // Add other environment variables here as needed
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}